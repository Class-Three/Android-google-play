name: Build Android APK

on:
  push:
    branches: [ main, master ]  # أضف master أو جميع الفروع
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 95  # زيادة الوقت لبناء Android

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          openjdk-8-jdk \
          git \
          zip \
          unzip \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo6 \
          cmake \
          libffi-dev \
          libssl-dev \
          libsqlite3-dev \
          build-essential \
          python3-dev

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip setuptools wheel
        pip3 install buildozer==1.4.0
        pip3 install cython==0.29.36
        pip3 install virtualenv

    - name: Verify and optimize buildozer.spec
      run: |
        echo "=== Current buildozer.spec ==="
        if [ -f buildozer.spec ]; then
            cat buildozer.spec
            # نسخ احتياطي
            cp buildozer.spec buildozer.spec.backup
        else
            buildozer init
        fi

        # تحسين ملف buildozer.spec
        python3 -c "
import re
spec_content = open('buildozer.spec', 'r').read()

# إزالة التعليقات الزائدة والأسطر الفارغة
spec_content = re.sub(r'#.*\\n', '\\n', spec_content)
spec_content = re.sub(r'\\n\\s*\\n', '\\n', spec_content)

# تأكد من وجود الإعدادات الأساسية
required_settings = {
    'title': 'MyKivyApp',
    'package.name': 'mykivyapp', 
    'package.domain': 'org.test',
    'source.dir': '.',
    'source.include_exts': 'py,png,jpg,kv,atlas',
    'version': '1.0',
    'requirements': 'python3,kivy',
    'orientation': 'portrait',
    'android.permissions': 'INTERNET',
    'android.api': '28',
    'android.minapi': '21'
}

for key, value in required_settings.items():
    if not re.search(f'^{key}\s*=', spec_content, re.MULTILINE):
        spec_content += f'{key} = {value}\\n'

with open('buildozer.spec', 'w') as f:
    f.write(spec_content)
        
        echo 'buildozer.spec optimized'
        "

    - name: Build APK with optimized settings
      run: |
        # تنظيف شامل
        buildozer android clean 2>/dev/null || true
        
        # إعداد متغيرات البيئة المثلى
        export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        export ANDROIDSDK="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROIDNDK="$HOME/.buildozer/android/platform/android-ndk-r23b"
        export PATH="$HOME/.local/bin:$PATH"
        
        # بناء مع إدارة ذاكرة محسنة
        echo "Starting optimized build..."
        python3 -c "
import subprocess
import sys
import os

# إعداد عملية البناء مع إدارة أفضل للذاكرة
env = os.environ.copy()
env['PYTHONUNBUFFERED'] = '1'

process = subprocess.Popen(
    ['buildozer', '-v', 'android', 'debug'],
    stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT,
    universal_newlines=True,
    env=env,
    bufsize=1
)

# قراءة المخرجات بشكل تدريجي لمنع امتلاء Buffer
with open('build.log', 'w') as log_file:
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print(output.strip())
            log_file.write(output)
            log_file.flush()

exit_code = process.poll()
sys.exit(exit_code)
        " 2>&1 | tee -a build_detailed.log

        # التحقق من حالة البناء
        if [ $? -eq 0 ]; then
            echo "=== BUILD SUCCESSFUL ==="
            ls -la bin/
        else
            echo "=== BUILD FAILED - ANALYZING LOGS ==="
            
            # تحليل مفصل للخطأ
            echo "=== LAST 20 LINES ==="
            tail -20 build.log | tail -20
            
            echo "=== COMMON ERROR PATTERNS ==="
            grep -i -E "error|fail|exception|missing|not found" build.log | tail -10
            
            echo "=== MEMORY ISSUES ==="
            grep -i -E "memory|kill|oom|swap" build.log || echo "No memory issues detected"
            
            echo "=== COMPILATION ERRORS ==="
            grep -i -E "compile|cython|gcc|g++" build.log | grep -i error | tail -5 || echo "No compilation errors detected"
            
            exit 1
        fi

    - name: Upload APK on success
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-success
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-failure-logs
        path: |
          build.log
          build_detailed.log
          .buildozer/**/log.txt
        retention-days: 3

    - name: Upload buildozer spec
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-spec
        path: buildozer.spec
        retention-days: 3
